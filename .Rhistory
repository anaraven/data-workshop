colnames(a) <- n
View(a)
data <- textConnection(centennial_Y2K$V1)
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X", "2F8.0", "F6.0",
"2I4", rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran(data, fmt)
colnames(a) <- n
View(a)
summary(s)
summary(a)
a <- read.fortran(data, fmt, as.is=FALSE)
data <- textConnection(centennial_Y2K$V1)
a <- read.fortran(data, fmt, as.is=FALSE)
colnames(a) <- n
summary(a)
plot(a[,c("glat","glon")])
plot(a[,c("glon","glat")])
hist(a$mag.1)
hist(exp(a$mag.1))
plot(a[,c("glon","glat")],pch=a$mag.1/8)
plot(a[,c("glon","glat")],cex=a$mag.1/8)
plot(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
hist(exp(a$mag.1-5))
hist(exp((a$mag.1-5)/2)
)
hist(exp((a$mag.1-5)/4))
hist(exp((a$mag.1-5)/6))
hist(exp((a$mag.1-5)/2))
plot(a[,c("glon","glat")],cex=exp((a$mag.1-5)/2))
plot(a[,c("glon","glat")],cex=exp((a$mag.1-5)/4))
plot(a[,c("glon","glat")],cex=exp((a$mag.1-5)/6))
table(a$greg)
sort(table(a$greg))
b <- a[a$mag.1>8]
b <- a[a$mag.1>8,]
plot(b[,c("glon","glat")],cex=exp((b$mag.1-5)/6))
plot(b[,c("glon","glat")],cex=exp((b$mag.1-8)/6))
plot(b[,c("glon","glat")],cex=exp((b$mag.1-8)/2))
plot(b[,c("glon","glat")],cex=exp((b$mag.1-8)))
energy <- exp(3*log(10)*(a$mag.1 + 2.9)/2)
hist(energy)
plot(sort(energy))
plot(sort(energy)/sum(energy))
plot(cumsum(sort(energy))/sum(energy))
hist(energy/sum(energy))
a[energy>sum(energy)/3]
a[energy>sum(energy)/3,]
a[energy>sum(energy)*0.3,]
plot(a[,c("glon","glat")],cex=energy*3/sum(energy))
plot(a[,c("glon","glat")],cex=energy*9/sum(energy))
a[energy>sum(energy)*0.3,4:15]
setwd("Desktop/data-workshop/")
m <- read.csv("micro array Raw data 2015 son.csv")
d1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
d2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
d3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
r <- data.frame(PROBE_ID=m$PROBE_ID, SYMBOL= m$SYMBOL, d1, d2, d3)
?t.test
r[1:10,3:5]
t.test(r[1:10,3:5])
mapply(function(x,y,z) t.test(c(x,y,z))$p.value, d1, d2, d3)
d1 <- m$X32GyHeLa.AVG_Signal   - m$KontrolHeLa.AVG_Signal
d2 <- m$X32GyHeLa.AVG_Signal.1 - m$KontrolHeLa.AVG_Signal.1
d3 <- m$X32GyHeLa.AVG_Signal.2 - m$KontrolHeLa.AVG_Signal.2
d1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
d2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
d3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
avg <- <- rep(NA, lenght(d1))
get.p.value <- function(x,y,z) {
return( t.test(x,y,z)$p.value )
}
avg <- mapply(mean, d1, d2, d3)
p.val <- mapply(get.p.value, d1, d2, d3)
get.p.value <- function(x,y,z) {
return( t.test(c(x,y,z), alternative = "two.sided")$p.value )
}
p.val <- mapply(get.p.value, d1, d2, d3)
hist(p.val)
table(cut(p.val,10))
table(cut(p.val,20))
p.adjust(p.val)
q.val <- p.adjust(p.val, method = "fdr")
hist(q.val)
plot(pvl,qval)
plot(p.val,q.val)
abline(0,1,col="red")
abline(h=0.05,col="red")
abline(v=0.05,col="red")
sum(q.val<0.05)
sum(p.val<0.05)
sum(p.adjust(p.val)<0.05)
sum(p.adjust(p.val, method="holm")<0.05)
sum(p.adjust(p.val, method="BH")<0.05)
sum(p.adjust(p.val, method="BY")<0.05)
sum(p.adjust(p.val, method="none")<0.05)
sum(p.adjust(p.val, method="hommel")<0.05)
sum(p.adjust(p.val, method="hochberg")<0.05)
sum(p.adjust(p.val, method="bonferroni")<0.05)
r <- data.frame(PROBE_ID=m$PROBE_ID, SYMBOL= m$SYMBOL, d1, d2, d3, avg, p.val, q.val)
subset(r, qval<0.05)
subset(r, q.val<0.05)
plot(avg~p.val, pch=".")
plot(avg, p.val, pch=".")
plot(avg, p.val, log="y", pch=".")
plot(avg, -log(p.val), pch=".")
plot(avg, -log10(p.val), pch=".")
plot(avg, -log10(q.val), pch=".")
plot(avg, -log10(q.val/(1-q.val)), pch=".")
plot(avg, -log10(q.val/(1-q.val)/0.95*0.05), pch=".")
plot(avg, -log10(q.val/(1-q.val)/0.05*0.95), pch=".")
plot(avg, -log10(q.val), pch=16, cex=0.4)
head(sort(p.val))
hist(sort(p.val)[1:1000])
hist(sort(p.val)[1:100])
hist(sort(p.val)[1:10])
table(sort(p.val)[1:10])
table(sort(p.val)[1:20])
plot(table(sort(p.val)[1:20]))
plot(table(sort(p.val)[1:100]))
plot(table(sort(p.val)[1:1000]))
plot(table(sort(p.val)[1:10000]))
plot(table(sort(p.val)[1:20]))
plot(avg, -log10(p.val), pch=16, cex=0.4)
table(table(m$SYMBOL))
View(m)
colnames(m)
mix <- sample.int(nrow(m))
m[,3:26] <- m[mix, 3:26]
View(m)
d1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
d2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
d3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
avg <- rep(NA, lenght(d1))
avg <- mapply(mean, d1, d2, d3)
p.val <- mapply(get.p.value, d1, d2, d3)
q.val <- p.adjust(p.val, method = "fdr")
p.val <- mapply(get.p.value, d1, d2, d3)
plot(avg, -log10(p.val), pch=".")
plot(avg, -log10(q.val), pch=16, cex=0.4)
plot(avg, -log10(p.val), pch=16, cex=0.4)
write.csv(m, "microarray.csv")
source('~/Desktop/data-workshop/contrast-conditions.R')
source('~/Desktop/data-workshop/contrast-conditions.R')
r1 <- contrast.condition("X32GyHeLa", "KontrolHeLa")
r1 <- contrast.condition("X32GyHeLa", "KontrolHeLa", m)
colnames(m)
r2 <- contrast.condition("X16GyC4I", "KontrolC4I", m)
source('~/Desktop/data-workshop/contrast-conditions.R')
with(r2, volcano.plot(avg, p.val))
source('~/Desktop/data-workshop/contrast-conditions.R')
with(r2, volcano.plot(avg, p.val))
with(r1, volcano.plot(avg, p.val))
with(r1, volcano.plot(avg, q.val))
source('~/Desktop/data-workshop/contrast-conditions.R')
with(r1, volcano.plot(avg, q.val))
with(r1, volcano.plot(avg, p.val))
with(r2, volcano.plot(avg, p.val))
with(r2, volcano.plot(avg, q.val))
hist(r2$q.vl)
hist(r2$q.val)
hist(r2$p.val)
p.adjust
hist(m[,3])
hist(m[,3],nclass=30)
colnames(m)
hist(m[,4],nclass=30)
hist(m[,4],nclass=50)
table(cut(m[,4],50))
table(m[,4]>0.05)
table(m[,4]>0.01)
hist(m[m[,4]>0.01,3])
hist(log(m[m[,4]>0.01,3]))
d1 <- m$X32GyHeLa.AVG_Signal   - m$KontrolHeLa.AVG_Signal
hist(d1)
hist(d1,nclass=30)
hist(d1,nclass=300)
d1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
hist(d1,nclass=300)
colnames(m)
grep('AVG_Signal', colnames(m))
grep('AVG_Signal', colnames(m), value = TRUE)
grep('AVG_Signal$', colnames(m), value = TRUE)
split(grep('AVG_Signal$', colnames(m), value = TRUE),".")
strsplit(grep('AVG_Signal$', colnames(m), value = TRUE),".")
strsplit(grep('AVG_Signal$', colnames(m), value = TRUE),"\.")
strsplit(grep('AVG_Signal$', colnames(m), value = TRUE),".", fixed=TRUE)
sapply(strsplit(grep('AVG_Signal$', colnames(m), value = TRUE),".", fixed=TRUE), `[`, 1)
mat <- sapply(strsplit(grep('AVG_Signal$', colnames(m), value = TRUE),".", fixed=TRUE), `[`, 1)
mat <- matrix(mat,2,2)
mat
knitr::kable(mat)
knitr::kable(as.data.frame(mat))
knitr::kable(as.data.frame(mat, colnames=c("Treat", "Control")))
knitr::kable(data.frame(mat, colnames=c("Treat", "Control")))
knitr::kable(as.data.frame(mat, col.names=c("Treat", "Control")))
?as.data.frame
knitr::kable(data.frame(mat, col.names=c("Treat", "Control")))
colnames(mat) <- c("Treat", "Control")
knitr::kable(as.data.frame(mat, colnames=c("Treat", "Control")))
knitr::kable(as.data.frame(mat))
row.names(mat) <- c("HeLa","C4I")
knitr::kable(as.data.frame(mat))
round(1/3)
round(1/3,1)
plot(1000/(100*(1:20)))
plot(1000/(100*(1:20)),100*(1:20))
plot(100*(1:20),1000/(100*(1:20)))
plot(100*(1:20),1000/(100*(1:20)), xlab="Treatment signal intensity", ylab="Fold Change")
hist(p.val, nclass=20)
abline(h=length(p.val/20))
abline(v=length(p.val/20))
abline(h=length(p.val)/20)
hist(p.val, nclass=20)
abline(h=length(p.val)/20, col="red")
plot(avg, -log10(q.val), pch=16, cex=0.4)
par(mai=c(0,0,0,0))
plot(avg, -log10(q.val), pch=16, cex=0.4)
par(mai=c(1,0,0,0))
plot(avg, -log10(q.val), pch=16, cex=0.4)
plot(lfc.1, lfc2, pch=16, cex=0.4)
lfc.1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
lfc.2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
lfc.3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
hist(lfc.1, nclass=100)
plot(lfc.1, lfc2, pch=16, cex=0.4)
plot(lfc.1, lfc.2, pch=16, cex=0.4)
dev.curr()
dev.cur()
dev.off()
plot(lfc.1, lfc.2, pch=16, cex=0.4)
r2 <- contrast.condition("X16GyC4I", "KontrolC4I", m)
with(r2, volcano.plot(avg, q.val))
hist(r2$q.val)
hist(r2$p.val)
r2 <- contrast.condition("X16GyC4I", "X32GyHeLa", m)
hist(r2$p.val)
hist(r2$q.val)
with(r2, volcano.plot(avg, q.val))
r2 <- contrast.condition("X32GyHeLa", "X16GyC4I", m)
with(r2, volcano.plot(avg, q.val))
library(limma)
limmaUsersGuide()
source("http://bioconductor.org/biocLite.R")
biocLite("marray")
?rma
??rma
?BiocUpgrade
biocLite("BiocUpgrade")
version()
R.version()
R.version
lmFit
m <- read.csv("micro array Raw data 2015 son.csv")
mix <- sample.int(nrow(m))
m[,3:26] <- m[mix, 3:26]
colnames(m)
n<-colnames(m)
sub("X32GyHeLa","T1",n)
n <- sub("X32GyHeLa","T1",n)
n <- sub("X16GyC4I","T2",n)
n
n <- sub("KontrolHeLa","C1",n)
n
n <- sub("KontrolC4I","C2",n)
n
colnames(m) <- n
write.csv(m, "microarray.csv")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("igraph")
install.packages("limma")
source("http://bioconductor.org/biocLite.R")
biocLite("marray")
biocLite("GO.db")
cen <- read.table("~/Desktop/data-workshop/centennial_Y2K.CAT.txt")
cen <- read.table("~/Desktop/data-workshop/centennial_Y2K.CAT.txt", sep="\t")
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X",
"2F8.0", "F6.0", "2I4",
rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran(data, fmt)
a <- read.fortran(cen, fmt)
a <- read.fortran("centennial_Y2K.CAT.txt", fmt)
View(a)
version()
version
View(centennial_Y2K)
data <- textConnection(centennial_Y2K$V1)
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X", "2F8.0", "F6.0",
"2I4", rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran("centennial_Y2K.CAT.txt", fmt)
n <- unlist(lapply(1:12,function(k) {
c(paste("mag",k,sep="."), paste("msc",k,sep="."), paste("mdo",k,sep="."))
}))
n <- c("icat", "asol", "isol", "yr", "mon", "day", "hr", "min", "sec", "glat", "glon", "dep", "greg", "ntel", n)
colnames(a) <- n
View(a)
install.packages("Date")
install.packages("Date")
install.packages("date")
library(date)
mdy.date(1,2,3)
date.mm(mdy.date(1,2,3))
date.mmddyy(mdy.date(1,2,3))
as.POSIXct.date(mdy.date(1,2,3))
as.POSIXct.Date(mdy.date(1,2,3))
as.POSIXct(mdy.date(1,2,3))
x <- as.POSIXct(mdy.date(1,2,3))
x
names(x)
mdy.date(1,2,3)
x <- mdy.date(1,2,3)
x
as.numeric(x)
as.numeric(mdy.date(1,2,3))
as.numeric(mdy.date(1,2,2103))
as.numeric(mdy.date(1,2,1960))
as.numeric(mdy.date(1,1,2103))
as.numeric(mdy.date(1,1,1960))
?julian
as.Date.date
as.Date.POSIXlt
?as.Data
julian(1,2,3)
julian(1,2,3, origin(month=1, day=1, year=1))
julian(1,2,3, origin=c(month=1, day=1, year=1))
julian.POSIXt
julian.Date
mdy.date(1,2,3)-mdy.date(1,1,1)
fm <- read.table("~/Desktop/data-workshop/FullMoons1900-2100.txt", quote="\"")
View(fm)
mdy.date(15,1,1900)-mdy.date(1,1,1)
mdy.date(1,15,1900)-mdy.date(1,1,1)
mdy.date(1,15,1900)-mdy.date(1,1,1800)
mdy.date(1,15,1900)-mdy.date(1,1,100)
mdy.date(1,15,1900)-mdy.date(1,1,-4713)
mdy.date(1,15,1900)-mdy.date(1,1,-4713, nineteen = FALSE)
mdy.date(1,15,1900)-mdy.date(1,0,-4713, nineteen = FALSE)
mdy.date(1,15,1900)-mdy.date(1,1,-4713, nineteen = FALSE)
mdy.date(a$mon,a$day,a$year)
mdy.date(a$mon,a$day,a$yr)
mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)
head(mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900))
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) % 28)
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %mod& 28)
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %mod% 28)
?mod
??mod
?`/`
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28)
barplot(table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28))
cnt <- table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28)
mean(cnt)
nrows(a)/28
nrow(a)/28
dbinom(x = cnt, size = nrow(a),prob = 1/28)
plot(dbinom(x = cnt, size = nrow(a),prob = 1/28))
stem(dbinom(x = cnt, size = nrow(a),prob = 1/28))
dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.05
dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.01
table(dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.01)
plot(pbinom(x = cnt, size = nrow(a),prob = 1/28))
plot(qbinom(x = cnt, size = nrow(a),prob = 1/28))
?dbinom
plot(pbinom(q = cnt, size = nrow(a),prob = 1/28))
sort(pbinom(q = cnt, size = nrow(a),prob = 1/28))
which(pbinom(q = cnt, size = nrow(a),prob = 1/28)<0.01)
which(pbinom(q = cnt, size = nrow(a),prob = 1/28)<0.05)
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28)))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "fdr"))
p.adjust
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "BY"))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "BH"))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "hochberg"))
install.packages(c("maps", "maptools", "mapdata"))
library(maps)
library(mapdata)
map("world")
plot(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
points(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
map("world")
points(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
map("worldHires", xlim=c(-100,100), ylim=c(-60,60))
map("worldHires", xlim=c(-100,100), ylim=c(-60,60),mar=c(0,0,0,0))
points(a[,c("glon","glat")], cex=0.5, col="red"
)
map("worldHires", ylim=c(-60,60),mar=c(0,0,0,0))
map("worldHires",mar=c(0,0,0,0))
points(a[,c("glon","glat")], cex=0.5, col="red")
map("worldHires",mar=c(0,0,0,0))
points(a[a$mag.1>8,c("glon","glat")], cex=0.5, col="red")
install.packages("oce")
library(oce)
library(date)
fm <- read.table("~/Desktop/data-workshop/FullMoons1900-2100.txt", quote="\"")
View(fm)
moonAngle(fm$V6[1:10])
moonAngle(fm$V6[1:10],0,0)
as.POSIXct.numeric(fm$V6[1:10])
with(head(fm),paste(V1,V2,V3,V4))
with(head(fm),as.POSIXct(paste(V1,V2,V3,V4),"%Y %B %d %H:%M")
)
moonAngle(julian(fm$V6[1:10]),0,0)
monts
month.abb
m <- 1:12
names(m) <-month.abb
with(head(fm),paste(V1,m[V2],V3,V4))
with(head(fm),as.POSIXct(paste(V1,m[V2],V3,V4),"%Y %m %d %H:%M")
)
with(head(fm),mdy.date(V1,m[V2],V3))
summary(fm)
with(head(fm),mdy.date(m[V2],V3,V1))
with(head(fm),moonAngle(mdy.date(m[V2],V3,V1)))
with(head(fm),moonAngle(mdy.date(m[V2],V3,V1)),0,0)
with(head(fm),moonAngle(mdy.date(m[V2],V3,V1),0,0))
with(head(fm),as.POSIXct(mdy.date(m[V2],V3,V1), tz="GMT"))
with(head(fm),as.POSIXct(mdy.date(m[V2],V3,V1), tz="UTC"))
with(head(fm),paste(m[V2],V3,V1))
m
fm <- read.table("~/Desktop/data-workshop/FullMoons1900-2100.txt", quote="\"", as.is=T)
with(head(fm),paste(m[V2],V3,V1))
with(head(fm),as.POSIXct(mdy.date(m[V2],V3,V1), tz="UTC"))
m <- read.csv("microarray.csv")
View(m)
lfc.1 <- log2(m$T1.AVG_Signal)   - log2(m$C1.AVG_Signal)
lfc.2 <- log2(m$T1.AVG_Signal.1) - log2(m$C1.AVG_Signal.1)
lfc.3 <- log2(m$T1.AVG_Signal.2) - log2(m$C1.AVG_Signal.2)
plot(m$T1.AVG_Signal,m$C1.AVG_Signal, pch=".")
plot(m$T1.AVG_Signal,m$C1.AVG_Signal)
plot(m$T1.AVG_Signal,m$C1.AVG_Signal, pch=16, cex=0.4)
plot(m$T1.AVG_Signal,m$T1.AVG_Signal.1, pch=".")
plot(m$C1.AVG_Signal,m$C1.AVG_Signal.1, pch=".")
plot(log2(m$C1.AVG_Signal), log2(m$C1.AVG_Signal.1), pch=".")
plot(log2(m$C1.AVG_Signal), log2(m$C1.AVG_Signal), pch=".")
abline(0,1,col="red")
plot(log2(m$C1.AVG_Signal), log2(m$C1.AVG_Signal.1), pch=".")
abline(0,1,col="red")
plot(log2(m$C2.AVG_Signal), log2(m$C2.AVG_Signal.1), pch=".")
abline(0,1,col="red")
plot(log2(m$C2.AVG_Signal), log2(m$C2.AVG_Signal.2), pch=".")
abline(0,1,col="red")
m.1 <-  log2(m$C2.AVG_Signal.1) - log2(m$C2.AVG_Signal.2)
a.1 <- (log2(m$c2.AVG_Signal.1) + log2(m$C2.AVG_Signal.2))/2
a.1 <- (log2(m$C2.AVG_Signal.1) + log2(m$C2.AVG_Signal.2))/2
plot(a.1,m.1,pch=".")
abline(h=0, col="red")
plot(avg.1,lfc.1,pch=".")
avg.1 <- (log2(m$T1.AVG_Signal)   + log2(m$C1.AVG_Signal))/2
avg.2 <- (log2(m$T1.AVG_Signal.1) + log2(m$C1.AVG_Signal.1))/2
avg.3 <- (log2(m$T1.AVG_Signal.2) + log2(m$C1.AVG_Signal.2))/2
plot(avg.1,lfc.1,pch=".")
abline(h=0, col="red")
plot(avg.2,lfc.2,pch=".")
abline(h=0, col="red")
plot(avg.3,lfc.3,pch=".")
abline(h=0, col="red")
library("limma", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(limma)
limmaUsersGuide()
install.packages("seqinr")
source("http://bioconductor.org/workflows.R")
workflowInstall("arrays")
limmaUsersGuide()
source("http://bioconductor.org/biocLite.R")
biocLite("affy")
biocLite("affyPLM")
library(Biobase)
View(m)
cols.with.data <- grep('AVG_Signal', colnames(m))
data.matrix <- as.matrix(m[, cols.with.data])
rownames(data.matrix) <- m$PROBE_ID
colnames(data.matrix) <- sub(".AVG_Signal", "", colnames(data.matrix))
View(data.matrix)
features <- AnnotatedDataFrame(m[,c("SYMBOL", "ILMN_GENE", "CHROMOSOME", "DEFINITION",
"SYNONYMS", "REFSEQ_ID", "UNIGENE_ID", "ENTREZ_GENE_ID", "GI")])
rownames(features) <- m$PROBE_ID
es <- ExpressionSet(assayData = data.matrix, featureData=features)
MAplot(es)
library(affyPLM)
MAplot(es)
?MAplot
Mbox(es)
biocLite("Biobase")
View(contrasts)
m <- read.csv("microarray.csv")
cols.with.data <- grep('AVG',colnames(m))
cols.with.data
cols.with.data <- grep('AVG',colnames(m), value = TRUE)
cols.with.data
data.matrix <- as.matrix(m[, cols.with.data])
head(data.matrix)
sub(".AVG_Signal", "", colnames(data.matrix))
rownames(data.matrix) <- m$PROBE_ID
colnames(data.matrix) <- sub(".AVG_Signal", "", colnames(data.matrix))
head(data.matrix)
View(m)
colnames(m)
library(Biobase)
features <- m[,c("SYMBOL", "ILMN_GENE", "CHROMOSOME", "DEFINITION", "SYNONYMS", "REFSEQ_ID", "UNIGENE_ID", "ENTREZ_GENE_ID", "GI")]
rownames(features) <- m$PROBE_ID
es <- ExpressionSet(assayData = data.matrix, featureData=features)
features <- AnnotatedDataFrame(m[,c("SYMBOL", "ILMN_GENE", "CHROMOSOME", "DEFINITION",
"SYNONYMS", "REFSEQ_ID", "UNIGENE_ID", "ENTREZ_GENE_ID", "GI")])
rownames(features) <- m$PROBE_ID
es <- ExpressionSet(assayData = data.matrix, featureData=features)
featureNames(es)
plot(es)
rma
library(affy)
rma
?rma
setClass("AssayData",es)
strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1]
setClass("AffyBatch",es)
normalize(es)
normalize.AffyBatch.loess(es)
normalize.qspline(es)
library(affyPLM)
normalize(es)
