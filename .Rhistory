abline(v=length(p.val/20))
abline(h=length(p.val)/20)
hist(p.val, nclass=20)
abline(h=length(p.val)/20, col="red")
plot(avg, -log10(q.val), pch=16, cex=0.4)
par(mai=c(0,0,0,0))
plot(avg, -log10(q.val), pch=16, cex=0.4)
par(mai=c(1,0,0,0))
plot(avg, -log10(q.val), pch=16, cex=0.4)
plot(lfc.1, lfc2, pch=16, cex=0.4)
lfc.1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
lfc.2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
lfc.3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
hist(lfc.1, nclass=100)
plot(lfc.1, lfc2, pch=16, cex=0.4)
plot(lfc.1, lfc.2, pch=16, cex=0.4)
dev.curr()
dev.cur()
dev.off()
plot(lfc.1, lfc.2, pch=16, cex=0.4)
r2 <- contrast.condition("X16GyC4I", "KontrolC4I", m)
with(r2, volcano.plot(avg, q.val))
hist(r2$q.val)
hist(r2$p.val)
r2 <- contrast.condition("X16GyC4I", "X32GyHeLa", m)
hist(r2$p.val)
hist(r2$q.val)
with(r2, volcano.plot(avg, q.val))
r2 <- contrast.condition("X32GyHeLa", "X16GyC4I", m)
with(r2, volcano.plot(avg, q.val))
library(limma)
limmaUsersGuide()
source("http://bioconductor.org/biocLite.R")
biocLite("marray")
?rma
??rma
?BiocUpgrade
biocLite("BiocUpgrade")
version()
R.version()
R.version
lmFit
m <- read.csv("micro array Raw data 2015 son.csv")
mix <- sample.int(nrow(m))
m[,3:26] <- m[mix, 3:26]
colnames(m)
n<-colnames(m)
sub("X32GyHeLa","T1",n)
n <- sub("X32GyHeLa","T1",n)
n <- sub("X16GyC4I","T2",n)
n
n <- sub("KontrolHeLa","C1",n)
n
n <- sub("KontrolC4I","C2",n)
n
colnames(m) <- n
write.csv(m, "microarray.csv")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("igraph")
install.packages("limma")
source("http://bioconductor.org/biocLite.R")
biocLite("marray")
biocLite("GO.db")
cen <- read.table("~/Desktop/data-workshop/centennial_Y2K.CAT.txt")
cen <- read.table("~/Desktop/data-workshop/centennial_Y2K.CAT.txt", sep="\t")
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X",
"2F8.0", "F6.0", "2I4",
rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran(data, fmt)
a <- read.fortran(cen, fmt)
a <- read.fortran("centennial_Y2K.CAT.txt", fmt)
View(a)
version()
version
View(centennial_Y2K)
data <- textConnection(centennial_Y2K$V1)
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X", "2F8.0", "F6.0",
"2I4", rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran("centennial_Y2K.CAT.txt", fmt)
n <- unlist(lapply(1:12,function(k) {
c(paste("mag",k,sep="."), paste("msc",k,sep="."), paste("mdo",k,sep="."))
}))
n <- c("icat", "asol", "isol", "yr", "mon", "day", "hr", "min", "sec", "glat", "glon", "dep", "greg", "ntel", n)
colnames(a) <- n
View(a)
install.packages("Date")
install.packages("Date")
install.packages("date")
library(date)
mdy.date(1,2,3)
date.mm(mdy.date(1,2,3))
date.mmddyy(mdy.date(1,2,3))
as.POSIXct.date(mdy.date(1,2,3))
as.POSIXct.Date(mdy.date(1,2,3))
as.POSIXct(mdy.date(1,2,3))
x <- as.POSIXct(mdy.date(1,2,3))
x
names(x)
mdy.date(1,2,3)
x <- mdy.date(1,2,3)
x
as.numeric(x)
as.numeric(mdy.date(1,2,3))
as.numeric(mdy.date(1,2,2103))
as.numeric(mdy.date(1,2,1960))
as.numeric(mdy.date(1,1,2103))
as.numeric(mdy.date(1,1,1960))
?julian
as.Date.date
as.Date.POSIXlt
?as.Data
julian(1,2,3)
julian(1,2,3, origin(month=1, day=1, year=1))
julian(1,2,3, origin=c(month=1, day=1, year=1))
julian.POSIXt
julian.Date
mdy.date(1,2,3)-mdy.date(1,1,1)
fm <- read.table("~/Desktop/data-workshop/FullMoons1900-2100.txt", quote="\"")
View(fm)
mdy.date(15,1,1900)-mdy.date(1,1,1)
mdy.date(1,15,1900)-mdy.date(1,1,1)
mdy.date(1,15,1900)-mdy.date(1,1,1800)
mdy.date(1,15,1900)-mdy.date(1,1,100)
mdy.date(1,15,1900)-mdy.date(1,1,-4713)
mdy.date(1,15,1900)-mdy.date(1,1,-4713, nineteen = FALSE)
mdy.date(1,15,1900)-mdy.date(1,0,-4713, nineteen = FALSE)
mdy.date(1,15,1900)-mdy.date(1,1,-4713, nineteen = FALSE)
mdy.date(a$mon,a$day,a$year)
mdy.date(a$mon,a$day,a$yr)
mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)
head(mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900))
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) % 28)
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %mod& 28)
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %mod% 28)
?mod
??mod
?`/`
table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28)
barplot(table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28))
cnt <- table((mdy.date(a$mon,a$day,a$yr)-mdy.date(1,1,1900)) %% 28)
mean(cnt)
nrows(a)/28
nrow(a)/28
dbinom(x = cnt, size = nrow(a),prob = 1/28)
plot(dbinom(x = cnt, size = nrow(a),prob = 1/28))
stem(dbinom(x = cnt, size = nrow(a),prob = 1/28))
dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.05
dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.01
table(dbinom(x = cnt, size = nrow(a),prob = 1/28)<0.01)
plot(pbinom(x = cnt, size = nrow(a),prob = 1/28))
plot(qbinom(x = cnt, size = nrow(a),prob = 1/28))
?dbinom
plot(pbinom(q = cnt, size = nrow(a),prob = 1/28))
sort(pbinom(q = cnt, size = nrow(a),prob = 1/28))
which(pbinom(q = cnt, size = nrow(a),prob = 1/28)<0.01)
which(pbinom(q = cnt, size = nrow(a),prob = 1/28)<0.05)
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28)))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "fdr"))
p.adjust
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "BY"))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "BH"))
sort(p.adjust(pbinom(q = cnt, size = nrow(a),prob = 1/28), "hochberg"))
install.packages(c("maps", "maptools", "mapdata"))
library(maps)
library(mapdata)
map("world")
plot(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
points(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
map("world")
points(a[,c("glon","glat")],cex=(a$mag.1-5)/4)
map("worldHires", xlim=c(-100,100), ylim=c(-60,60))
map("worldHires", xlim=c(-100,100), ylim=c(-60,60),mar=c(0,0,0,0))
points(a[,c("glon","glat")], cex=0.5, col="red"
)
map("worldHires", ylim=c(-60,60),mar=c(0,0,0,0))
map("worldHires",mar=c(0,0,0,0))
points(a[,c("glon","glat")], cex=0.5, col="red")
map("worldHires",mar=c(0,0,0,0))
points(a[a$mag.1>8,c("glon","glat")], cex=0.5, col="red")
m <- read.csv("microarray.csv")
View(m)
library(biobase)
source("http://bioconductor.org/biocLite.R")
biocLite("Biobase")
library(biobase)
library(Biobase)
lfc1 <- log2(m$X32GyHeLa.AVG_Signal)   - log2(m$KontrolHeLa.AVG_Signal)
lfc2 <- log2(m$X32GyHeLa.AVG_Signal.1) - log2(m$KontrolHeLa.AVG_Signal.1)
lfc3 <- log2(m$X32GyHeLa.AVG_Signal.2) - log2(m$KontrolHeLa.AVG_Signal.2)
a1 <- (log2(m$X32GyHeLa.AVG_Signal)   + log2(m$KontrolHeLa.AVG_Signal))/2
a2 <- (log2(m$X32GyHeLa.AVG_Signal.1) + log2(m$KontrolHeLa.AVG_Signal.1))/2
a3 <- (log2(m$X32GyHeLa.AVG_Signal.2) + log2(m$KontrolHeLa.AVG_Signal.2))/2
plot(lfc1~a1)
plot(lfc1~a1,pch=".")
plot(lfc2~a2,pch=".")
plot(lfc3~a3,pch=".")
lfc <- mapply(mean, lfc.1, lfc.2, lfc.3)
lfc <- mapply(mean, lfc1, lfc2, lfc3)
A <- mapply(mean, a1, a2, a3)
plot(lfc~A,pch=".")
View(m)
grep()
grep('AVG',colnames(m))
es <- ExpressionSet(m[,grep('AVG',colnames(m))])
es <- ExpressionSet(as.matrix(m[,grep('AVG',colnames(m))]))
library(limma)
plotMA(es)
limmaUsersGuide()
es
grep('AVG',colnames(m),value = T)
strsplit2(grep('AVG',colnames(m),value = T),".")
strsplit(grep('AVG',colnames(m),value = T),".")
strsplit(grep('AVG',colnames(m),value = T),"\.")
strsplit(grep('AVG',colnames(m),value = T),"\\.")
strsplit2(grep('AVG',colnames(m),value = T),"\\.")
strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1]
design(strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1])
design(~strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1])
model.matrix(~strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1])
strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1]
exps <- as.factor(strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1])
exps
model.matrix(exps)
model.matrix(~exps)
exps
model.matrix(~exps+0)
makeContrasts(X32GyHeLa-KontrolHeLa, levels=exps)
makeContrasts(X32GyHeLa-KontrolHeLa, X16GyC4I-KontrolC4I, levels=exps)
makeContrasts(X32GyHeLa-KontrolHeLa, X16GyC4I-KontrolC4I, X32GyHeLa-X16GyC4I, levels=exps)
design <- model.matrix(~exps+0)
View(design)
sub("expr","",colnames(design))
sub("exps","",colnames(design))
colnames(design) <- sub("exps","",colnames(design))
View(design)
makeContrasts(X32GyHeLa-KontrolHeLa, X16GyC4I-KontrolC4I, X32GyHeLa-X16GyC4I, levels=design)
contrasts <- makeContrasts(X32GyHeLa-KontrolHeLa, X16GyC4I-KontrolC4I, X32GyHeLa-X16GyC4I, levels=design)
fit <- lmFit(es, design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
topTable(fit2, coef=1, adjust="BH")
results <- decideTests(fit2)
vennDiagram(results)
biocLite("affyPLM")
biocLite("lpSolve")
library(affyPLM)
MAplot(es)
?MAplot
par(mfrow = c(2, 2))
MAplot(es, plot.method="smoothScatter")
warnings()
MAplot(es, ref=1)
MAplot(es, ref=7)
plot(m$KontrolHeLa.AVG_Signal,m$KontrolHeLa.AVG_Signal.1,pch=".")
plot(m$KontrolHeLa.AVG_Signal,m$KontrolHeLa.AVG_Signal.1,pch=".", log="xy")
abline(0,1,col="red")
plot(m$KontrolHeLa.AVG_Signal,m$KontrolHeLa.AVG_Signal.2,pch=".", log="xy")
abline(0,1,col="red")
plot(m$KontrolC4I.AVG_Signal,m$KontrolC4I.AVG_Signal.2,pch=".", log="xy")
abline(0,1,col="red")
plot(m$KontrolC4I.AVG_Signal,m$KontrolC4I.AVG_Signal.1,pch=".", log="xy")
abline(0,1,col="red")
plot(m$KontrolC4I.AVG_Signal.2,m$KontrolC4I.AVG_Signal.1,pch=".", log="xy")
abline(0,1,col="red")
Mbox(es)
biocLite("Biobase")
View(contrasts)
m <- read.csv("microarray.csv")
cols.with.data <- grep('AVG',colnames(m))
cols.with.data
cols.with.data <- grep('AVG',colnames(m), value = TRUE)
cols.with.data
data.matrix <- as.matrix(m[, cols.with.data])
head(data.matrix)
sub(".AVG_Signal", "", colnames(data.matrix))
rownames(data.matrix) <- m$PROBE_ID
colnames(data.matrix) <- sub(".AVG_Signal", "", colnames(data.matrix))
head(data.matrix)
View(m)
colnames(m)
library(Biobase)
features <- m[,c("SYMBOL", "ILMN_GENE", "CHROMOSOME", "DEFINITION", "SYNONYMS", "REFSEQ_ID", "UNIGENE_ID", "ENTREZ_GENE_ID", "GI")]
rownames(features) <- m$PROBE_ID
es <- ExpressionSet(assayData = data.matrix, featureData=features)
features <- AnnotatedDataFrame(m[,c("SYMBOL", "ILMN_GENE", "CHROMOSOME", "DEFINITION",
"SYNONYMS", "REFSEQ_ID", "UNIGENE_ID", "ENTREZ_GENE_ID", "GI")])
rownames(features) <- m$PROBE_ID
es <- ExpressionSet(assayData = data.matrix, featureData=features)
featureNames(es)
plot(es)
rma
library(affy)
rma
?rma
setClass("AssayData",es)
strsplit2(grep('AVG',colnames(m),value = T),"\\.")[,1]
setClass("AffyBatch",es)
normalize(es)
normalize.AffyBatch.loess(es)
normalize.qspline(es)
library(affyPLM)
normalize(es)
knn
knn()
RGB()
library(colorspace)
RGB()
pal <- diverge_hcl(9)
n <- length(pal)
## draw shaded polygons
plot(0, 0, type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n", bty = "n",
xlim = c(-88.5, -78.6), ylim = c(30.2, 35.2), asp = 1)
polygon(USSouthPolygon, col = pal[cut(na.omit(USSouthPolygon$z), breaks = 0:n/n)])
pal
?library
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
install.packages("maps")
library(maps)
?maps
data(worldMapEnv)
worldMapEnv
plot(worldMapEnv)
?world
world
world()
map("world")
map()
library(ddd)
map(fill=TRUE)
map(fill=TRUE,col=diverge_hcl(9))
brewer.pal.info
brewer.pal(9,"Set1")
brewer.pal(10,"Set1")
map(fill=TRUE,col=brewer.pal(9,"Set1"))
map(fill=TRUE,col=brewer.pal(8,"Set1"))
map(fill=TRUE,col=brewer.pal(7,"Set1"))
map(fill=TRUE,col=brewer.pal(6,"Set1"))
map(fill=TRUE,col=brewer.pal(9,"Set1"))
map(fill=TRUE,col=brewer.pal(8,"Set1"))
map(fill=TRUE,col=brewer.pal(9,"Set1"))
par(mai)
par("mai")
par("mas")
par("mar")
old <- par(mar=c(0,0,0,0)+0.1)
map(fill=TRUE,col=brewer.pal(9,"Set1"))
display.brewer.all()
par("mar")
old
?par
old <- par()
old
par(mar=c(0,0,0,0))
display.brewer.all()
par(mar=c(0,1,0,0))
display.brewer.all()
par(mar=c(0,1.5,0,0))
display.brewer.all()
par(mar=c(0,2,0,0))
display.brewer.all()
par(mar=c(0,2.2,0,0))
display.brewer.all()
map(fill=TRUE,col=brewer.pal(9,"Set1"))
library(rmarkdown)
?render
render
knitr:knit
knitr::knit
library(knitr)
hook_plot_custom
hook_plot_md
map
library(rmarkdown)
render("read_quake.R")
render("read_quake.R")
render("read_quake.R")
fmt <- c("A6", "A1", "A5", "I4", "2I3", "1X", "2I3", "F6.0", "1X", "2F8.0", "F6.0",
"2I4", rep(c("F4.0", "1X", "A2", "1X", "A5"),12))
a <- read.fortran("centennial_Y2K.CAT.txt", fmt)
a <- read.fortran("centennial_Y2K.CAT", fmt)
n <- unlist(lapply(1:12,function(k) {
c(paste("mag",k,sep="."), paste("msc",k,sep="."), paste("mdo",k,sep="."))
}))
n <- c("icat", "asol", "isol", "yr", "mon", "day", "hr", "min", "sec", "glat", "glon", "dep", "greg", "ntel", n)
colnames(a) <- n
#' If necesary install these packages using `install.packages(c("maps", "maptools", "mapdata"))`
library(maps)
library(mapdata)
install.packages(c("maps", "maptools", "mapdata"))
install.packages(c("maps", "maptools", "mapdata"))
map("worldHires",mar=c(0,0,0,0))
library(maps)
map("worldHires",mar=c(0,0,0,0))
?map
data(worldHiresMapEnv)
library(mapdata)
map("world2Hires",mar=c(0,0,0,0))
map("worldHires",mar=c(0,0,0,0))
map("worldHires",mar=c(0.1, 0.1, 0.1, 0.1))
points(a[,c("glon","glat")], cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(a[,c("glon","glat")], cex=0.5, col="red")
points(a$glon,a$glat, cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(a$glon,a$glat, cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(90+a$glon,a$glat, cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(180+a$glon,a$glat, cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(270+a$glon,a$glat, cex=0.5, col="red")
points(a$glon,a$glat, cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0))
points(a$glon,a$glat, cex=0.5, col="red")
points(360+a$glon,a$glat, cex=0.5, col="red")
map
install.packages("mapproj")
map("world2Hires",mar=c(0,0,0,0), projection = "mercator")
map("worldHires",mar=c(0,0,0,0), projection = "mercator")
map("world2Hires",mar=c(0,0,0,0), projection = "cylindrical")
map("world2Hires",mar=c(0,0,0,0), projection = "polyconic")
map("worldHires",mar=c(0,0,0,0), projection = "polyconic")
map("worldHires",mar=c(0,0,0,0), projection = "mecca")
map("worldHires",mar=c(0,0,0,0), projection = "mecca", parameters = 0)
map("worldHires",mar=c(0,0,0,0), projection = "mecca", parameters = 40)
map("worldHires",mar=c(0,0,0,0), projection = "mecca", parameters = -33)
map
maps:worldHiRes
maps::worldHiRes
data(worldHiresMapEnv)
worldHiresMapEnv
mapdata::worldHires
mapdata::worldHires()
map.poly
order(a$mag.1,decreasing = TRUE)[1:10]
order(a$mag.1,decreasing = TRUE)[1]
a[order(a$mag.1,decreasing = TRUE)[1],]
map.where(a$glat[2242],a$glon[2242])
a$glat[2242]
a$gon[2242]
a$glon[2242]
map.where(x=a$glat[2242], y=a$glon[2242])
map.where("world",x=a$glat[2242], y=a$glon[2242])
m<-map("world2Hires",mar=c(0,0,0,0))
map.where(m, a$glat[2242],a$glon[2242])
m<-map("world2Hires",mar=c(0,0,0,0),fill=T)
map.where(m, a$glat[2242],a$glon[2242])
points(a[,c("glon","glat")], cex=0.5, col="red")
map("world2Hires",mar=c(0,0,0,0),fill=T)
map("world2Hires",mar=c(0,0,0,0),fill=F)
points(a$glon+360*(a$glon<0), a$glat, col="red")
View(a)
points(a$glon+360*(a$glon<0), a$glat, col=cut(a$dep,c(0,70,350)))
points(a$glon+360*(a$glon<0), a$glat, col=c("red","green","blue")[cut(a$dep,c(0,70,350))])
map("world2Hires",mar=c(0,0,0,0),fill=F)
points(a$glon+360*(a$glon<0), a$glat, col=c("red","green","blue")[cut(a$dep,c(0,70,350))])
table(cut(a$dep,c(0,70,350)))
table(cut(a$dep,c(-1,70,350,Inf)))
table(cut(a$dep,c(-Inf,70,350,Inf)))
map("world2Hires",mar=c(0,0,0,0),fill=F)
points(a$glon+360*(a$glon<0), a$glat, fill=c("red","yellow","blue")[cut(a$dep,c(-Inf,70,350,Inf))])
?points
map("world2Hires",mar=c(0,0,0,0),fill=F)
points(a$glon+360*(a$glon<0), a$glat, col=c("red","yellow","blue")[cut(a$dep,c(-Inf,70,350,Inf))])
energy <- exp(3*log(10)*(a$mag.1 + 2.9)/2)
hist(energy)
plot(sort(energy)/sum(energy))
plot(sort(energy)/sum(energy),log=y)
plot(sort(energy)/sum(energy),log="y")
summary(energy)
summary(energy/max(energy))
color <- c("red","yellow","blue")[cut(a$dep,c(-Inf,70,350,Inf))]
long <- a$glon+360*(a$glon<0)
map("world2Hires")
norm_e <- energy/max(energy)
map("world2Hires")
points(long, a$glat, col=color,cex=norm_e+0.1)
map("world2Hires")
points(long, a$glat, col=color,cex=2*norm_e+0.1,pch=19)
points(long, a$glat, col="black",cex=2*norm_e+0.1,pch=1)
long <- a$glon+360*(a$glon<0)
lat <- a$glat
depth <- cut(a$dep,c(-Inf,70,350,Inf))
big_ones <- a$mag.1>8
map("world2Hires")
points(long, lat, col=color, cex=2*norm_e+0.1, pch=19)
points(long[big_ones], lat[big_ones], col="black", cex=2*norm_e[big_ones]+0.1, pch=1)
library("rmarkdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library("knitr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
render("read_quake.R")
render("read_quake.R")
n
map("world2Hires")
points(long, lat, bg=color, col=ifelse(big_ones,"black",color) cex=2*norm_e+0.1, pch=19)
points(long, lat, bg=color, col=ifelse(big_ones,"black",color), cex=2*norm_e+0.1, pch=19)
map("world2Hires")
RStudioGD()
plot(1,1)
map("world2Hires")
points(long, lat, bg=color, col=ifelse(big_ones,"black",color), cex=2*norm_e+0.1, pch=21)
pdf()
map("world2Hires")
points(long, lat, bg=color, col=ifelse(big_ones,"black",color), cex=2*norm_e+0.1, pch=21)
dev.off()
hist(energy, nclass=100)
hist(energy, nclass=1000)
hist(mag.1, nclass=100)
hist(a$mag.1, nclass=100)
plot(a$mag.1)
ioslides_presentation
